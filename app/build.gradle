apply plugin: 'com.android.application'
apply plugin: 'checkstyle'
apply plugin: 'org.jetbrains.kotlin.android'

/* gets the version name from the latest Git tag, stripping the leading v off */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

gradle.allprojects {
    ext.getVersionCode = { ->
        def manifestFile = file("app/src/main/AndroidManifest.xml")
        def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcher = pattern.matcher(manifestText)
        matcher.find()
        return Integer.parseInt(matcher.group(1))
    }
}

dependencies {
    implementation "androidx.core:core-ktx:1.9.0"

    def shizuku_version = '12.1.0'
    implementation "dev.rikka.shizuku:api:$shizuku_version"
    implementation "dev.rikka.shizuku:provider:$shizuku_version"
    implementation 'org.lsposed.hiddenapibypass:hiddenapibypass:4.3'
    implementation 'com.github.Depau:kotlet-android:v0.2.4'

    testImplementation 'junit:junit:4.12'
    androidTestUtil 'androidx.test:orchestrator:1.4.1'
    androidTestImplementation 'androidx.test:runner:1.4.0'
}

android {
    compileSdkVersion 33

    defaultConfig {
        archivesBaseName = "F-DroidShizukuPrivilegedExtension"
        versionName getVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        minSdkVersion 24
        targetSdkVersion 33
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    compileOptions {
        compileOptions.encoding = "UTF-8"

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    buildTypes {
        all {
            // Keep IPackageInstallObserver and IPackageDeleteObserver
            minifyEnabled false
            shrinkResources false
        }
    }


    File signFile = rootProject.file('signing.properties')
    lint {
        abortOnError true
        checkReleaseBuilds false
        htmlReport true
        lintConfig file('lint.xml')
        textReport false
        xmlReport false
    }
    namespace 'org.fdroid.fdroid.privileged'
    testNamespace 'org.fdroid.fdroid.privileged.tests'
    if (signFile.exists()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signFile))
        signingConfigs {
            release {
                storeFile rootProject.file(properties['key.store'])
                storePassword properties['key.store.password']
                keyAlias properties['key.alias']
                keyPassword properties['key.alias.password']
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
    }
}

checkstyle {
    toolVersion = '7.2'
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    source 'src/main/java'
    include '**/*.java'

    classpath = files()
}
